import { u256 } from '@btc-vision/as-bignum/assembly';
import {
    Address,
    AddressMap,
    Blockchain,
    BOOLEAN_BYTE_LENGTH,
    BytesWriter,
    Calldata,
    DeployableOP_20,
    OP20InitParameters,
    SafeMath,
} from '@btc-vision/btc-runtime/runtime';

@final
export class MyToken extends DeployableOP_20 {
    public constructor() {
        super();
        // Constructor runs on every interaction; keep it minimal.
    }

    public override onDeployment(calldata: Calldata): void {
        const maxSupply: u256 = u256.fromString('1000000000000000000000000000'); // 1 billion tokens
        const decimals: u8 = 18;
        const name: string = 'TPK';
        const symbol: string = 'TPK';

        this.instantiate(new OP20InitParameters(maxSupply, decimals, name, symbol));

        // Mint initial supply to the deployer
        this._mint(Blockchain.tx.origin, maxSupply);
    }

    @method(
        {
            name: 'to',
            type: ABIDataTypes.ADDRESS,
        },
        {
            name: 'amount',
            type: ABIDataTypes.UINT256,
        }
    )
    @returns({
        name: 'success',
        type: ABIDataTypes.BOOL,
    })
    @emit('Mint')
    public mint(calldata: Calldata): BytesWriter {
        this.onlyDeployer(Blockchain.tx.sender);

        const to: Address = calldata.readAddress();
        const amount: u256 = calldata.readU256();
        const success: bool = this._mint(to, amount);

        const response = new BytesWriter(BOOLEAN_BYTE_LENGTH);
        response.writeBoolean(success);

        return response;
    }

    @method({
        name: 'addressAndAmount',
        type: ABIDataTypes.ADDRESS_UINT256_TUPLE,
    })
    @returns({
        name: 'success',
        type: ABIDataTypes.BOOL,
    })
    @emit('Mint')
    public airdrop(calldata: Calldata): BytesWriter {
        this.onlyDeployer(Blockchain.tx.sender);

        const addressAndAmount: AddressMap<u256> = calldata.readAddressMapU256();
        const addresses: Address[] = addressAndAmount.keys();

        let totalAirdropped: u256 = u256.Zero;

        for (let i: i32 = 0; i < addresses.length; i++) {
            const address: Address = addresses[i];
            const amount: u256 = addressAndAmount.get(address);

            const currentBalance: u256 | null = this.balanceOfMap.get(address);
            const newBalance: u256 = currentBalance
                ? SafeMath.add(currentBalance, amount)
                : amount;

            this.balanceOfMap.set(address, newBalance);
            totalAirdropped = SafeMath.add(totalAirdropped, amount);

            this.createMintEvent(address, amount);
        }

        const newTotalSupply: u256 = SafeMath.add(this._totalSupply.value, totalAirdropped);
        this._totalSupply.set(newTotalSupply);

        const writer: BytesWriter = new BytesWriter(BOOLEAN_BYTE_LENGTH);
        writer.writeBoolean(true);

        return writer;
    }
}
